package types

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/DxChainNetwork/godx/common"
	"github.com/DxChainNetwork/godx/common/hexutil"
	"github.com/DxChainNetwork/godx/common/math"
	"github.com/DxChainNetwork/godx/crypto"
	"github.com/DxChainNetwork/godx/rlp"
	"math/big"
	"reflect"
	"strings"
	"testing"
)

//
//
// ,---.                   |     ,   .                        --.--          |
// |--- ,---.,---.,---.,---|,---.|\  |,---.,---.,---.,---.      |  ,---.,---.|--- ,---.
// |    |   ||    |   ||   ||---'| \ ||   ||   ||    |---'      |  |---'`---.|    `---.
// `---'`   '`---'`---'`---'`---'`  `'`---'`   '`---'`---'      `  `---'`---'`---'`---'
//
// BlockNounce related testcases
// TestEncodeNonce test EncodeNonce
func TestEncodeNonce(t *testing.T) {
	tests := []struct {
		in  uint64
		out BlockNonce
	}{
		{0, BlockNonce{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{10, BlockNonce{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a}},
		{12345, BlockNonce{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39}},
		{123878190472987895, BlockNonce{0x01, 0xb8, 0x1a, 0x8e, 0xd2, 0x8f, 0x84, 0xf7}},
		{18446744073709551615, BlockNonce{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}},
	}
	for _, test := range tests {
		if val := EncodeNonce(test.in); !bytes.Equal(val[:], test.out[:]) {
			t.Errorf("EncodeNonce for input %d give unexpected result. Got %x. Want %x.", test.in,
				val, test.out)
		}
	}
}

// TestBlockNonce_Uint64 test BlockNonce.Uint64
func TestBlockNonce_Uint64(t *testing.T) {
	tests := []struct {
		out uint64
		in  BlockNonce
	}{
		{0, BlockNonce{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{10, BlockNonce{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a}},
		{12345, BlockNonce{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39}},
		{123878190472987895, BlockNonce{0x01, 0xb8, 0x1a, 0x8e, 0xd2, 0x8f, 0x84, 0xf7}},
		{18446744073709551615, BlockNonce{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}},
	}
	for _, test := range tests {
		if val := test.in.Uint64(); val != test.out {
			t.Errorf("BlockNonce.Uint64 for input %x give unexpected result. Got %d. Want %d", test.in,
				val, test.out)
		}
	}
}

// TestBlockNonce_Uint64 test BlockNonce.MarshalText
func TestBlockNonce_MarshalText(t *testing.T) {
	tests := []struct {
		in  BlockNonce
		out []byte
	}{
		{BlockNonce{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, []byte{0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30}},
		{BlockNonce{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a}, []byte{0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x61}},
		{BlockNonce{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39}, []byte{0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x33, 0x39}},
		{BlockNonce{0x01, 0xb8, 0x1a, 0x8e, 0xd2, 0x8f, 0x84, 0xf7}, []byte{0x30, 0x78, 0x30, 0x31, 0x62, 0x38, 0x31, 0x61, 0x38, 0x65, 0x64, 0x32, 0x38, 0x66, 0x38, 0x34, 0x66, 0x37}},
		{BlockNonce{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, []byte{0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66}},
	}
	for _, test := range tests {
		val, err := test.in.MarshalText()
		if err != nil {
			panic(fmt.Sprintf("Cannot marshal test for input %x", test.in))
		}
		if !bytes.Equal(val, test.out) {
			t.Errorf("BlockNonce.MarshalText for input %x give unexpected result. Got %s. Want %s.",
				test.in, string(val), string(test.out))
		}
	}
}

// TestBlockNonce_UnmarshalText test BlockNonce.UnmarshalText
func TestBlockNonce_UnmarshalText(t *testing.T) {
	tests := []struct {
		in  []byte
		out BlockNonce
	}{
		{[]byte{0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30}, BlockNonce{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{[]byte{0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x61}, BlockNonce{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a}},
		{[]byte{0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x33, 0x39}, BlockNonce{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39}},
		{[]byte{0x30, 0x78, 0x30, 0x31, 0x62, 0x38, 0x31, 0x61, 0x38, 0x65, 0x64, 0x32, 0x38, 0x66, 0x38, 0x34, 0x66, 0x37}, BlockNonce{0x01, 0xb8, 0x1a, 0x8e, 0xd2, 0x8f, 0x84, 0xf7}},
		{[]byte{0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66}, BlockNonce{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}},
	}
	for _, test := range tests {
		var n BlockNonce
		err := n.UnmarshalText(test.in)
		if err != nil {
			t.Errorf("BlockNonce.UnmarshalText for %s gives unexpected error: %s", string(test.in), err.Error())
		}
		if !bytes.Equal(test.out[:], n[:]) {
			t.Errorf("BlockNonce.UnmarshalText for input %s give unexpected result. Got %x. Want %x",
				string(test.in), n, test.out)
		}
	}
}

// TestBlockNonce_UnmarshalTextError tesst BlockNonce.UnmarshalText error scene.
// Wrong block nonce should return different errors, including odd length error, missing prefix,
// or wrong syntax
func TestBlockNonce_UnmarshalTextError(t *testing.T) {
	tests := []struct {
		in  []byte
		out error
	}{
		{out: hexutil.ErrOddLength, in: []byte{0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30}},
		{out: hexutil.ErrMissingPrefix, in: []byte{0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30}},
		{out: hexutil.ErrSyntax, in: []byte{0x30, 0x78, 0x10, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30}},
	}
	for _, test := range tests {
		var n BlockNonce
		err := n.UnmarshalText(test.in)
		if err != test.out {
			t.Errorf("Error type returned by UnmarshalText does not match. Got %s. Want %s", err, test.out)
		}
	}
	// One more error case to go. The error type is not defined
	var n BlockNonce
	data := []byte{0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30}
	err := n.UnmarshalText(data)
	if err == nil || err.Error() != "hex string has length 14, want 16 for BlockNonce" {
		t.Errorf("UnmarshalText does not give error. Got [%s]. Expected [%s].",
			err.Error(), "hex string has length 14, want 16 for BlockNonce")
	}
}

// |   |              |              --.--          |
// |---|,---.,---.,---|,---.,---.      |  ,---.,---.|--- ,---.
// |   ||---',---||   ||---'|          |  |---'`---.|    `---.
// `   '`---'`---^`---'`---'`          `  `---'`---'`---'`---'

var testHeaderData = map[string]struct {
	h              *Header
	hash           common.Hash
	jsonStr        string
	rlpStr         string
	size           common.StorageSize
	marshalError   error
	unmarshalError error
}{
	"ok": {
		jsonStr: `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x00000000000000000000000000000001238abcdd","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x989680","number":"0x1","gasLimit":"0x1388","gasUsed":"0x12c","timestamp":"0x5c64b546","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		rlpStr:  "f901f8a00000000000000000000000000000000000000000000000000000000000abcdefa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479400000000000000000000000000000001238abcdda0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a00000000000000000000000000000000000000000000000000000000000000000bc845c64b54680a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47088000000000000000a",
		hash:    common.HexToHash("2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"),
		h: &Header{
			ParentHash: common.HexToHash("abcdef"),
			UncleHash:  EmptyUncleHash,
			Coinbase:   common.HexToAddress("01238abcdd"),
			Root:       crypto.Keccak256Hash(nil),
			TxHash:     crypto.Keccak256Hash(nil),
			Bloom:      BytesToBloom(nil),
			Difficulty: big.NewInt(10000000),
			Number:     big.NewInt(1),
			GasLimit:   uint64(5000),
			GasUsed:    uint64(300),
			Time:       big.NewInt(1550103878),
			Extra:      []byte{},
			MixDigest:  crypto.Keccak256Hash(nil),
			Nonce:      EncodeNonce(uint64(10)),
		},
		size: common.StorageSize(551),
	},
	"corner": {
		jsonStr: `{"parentHash":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff","sha3Uncles":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff","miner":"0xffffffffffffffffffffffffffffffffffffffff","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000616b73646f6b617364666b6b6173646f666f6173646f66617369646f696669616c736466","difficulty":"0x704ebd4dc6d69350165b27b31810a6465715d8f7bfd236a6bca5742f4","number":"0x48864c2688b151ff985846d0c66ec6187732f4ce376f3e6a77a726","gasLimit":"0xffffffffffffffff","gasUsed":"0xffffffffffffffff","timestamp":"0x32ff0a68a8381f7e82b79d927fd942f325c2722414e05d3c7d13","extraData":"0x6c6b6173666b6668776b6866696f6a776f696a726f69686f6568666971686769757177696f65666869717768656975666869707571776865697566616473686668717768666f696871696f7266","mixHash":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff","nonce":"0xffffffffffffffff","hash":"0x09a6d3a63e6d995c974de6fcff7ca3f468b6859363b44d8107ac0c73c1a79347"}`,
		rlpStr:  "f9029da0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94ffffffffffffffffffffffffffffffffffffffffa0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a00000000000000000000000000000000000000000000000000000000000000000b9010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000616b73646f6b617364666b6b6173646f666f6173646f66617369646f696669616c7364669d0704ebd4dc6d69350165b27b31810a6465715d8f7bfd236a6bca5742f49b48864c2688b151ff985846d0c66ec6187732f4ce376f3e6a77a72688ffffffffffffffff88ffffffffffffffff9a32ff0a68a8381f7e82b79d927fd942f325c2722414e05d3c7d13b84d6c6b6173666b6668776b6866696f6a776f696a726f69686f6568666971686769757177696f65666869717768656975666869707571776865697566616473686668717768666f696871696f7266a0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88ffffffffffffffff",
		hash:    common.HexToHash("09a6d3a63e6d995c974de6fcff7ca3f468b6859363b44d8107ac0c73c1a79347"),
		h: &Header{
			ParentHash: common.BytesToHash(bytes.Repeat([]byte{0xff}, common.HashLength)),
			UncleHash:  common.BytesToHash(bytes.Repeat([]byte{0xff}, common.HashLength)),
			Coinbase:   common.BytesToAddress(bytes.Repeat([]byte{0xff}, common.AddressLength)),
			Root:       crypto.Keccak256Hash(nil),
			TxHash:     crypto.Keccak256Hash(nil),
			Bloom:      BytesToBloom([]byte("aksdokasdfkkasdofoasdofasidoifialsdf")),
			Difficulty: stringToBigInt("189237891283981841912398912938971297391782973891278301270974091707124", 10),
			Number:     stringToBigInt("29834889734294147190284012389182308190271129837917327105109501734", 10),
			GasLimit:   uint64(18446744073709551615),
			GasUsed:    uint64(18446744073709551615),
			Time:       stringToBigInt("81947818378918957852384019701902478917389127381912317241097491", 10),
			Extra:      []byte("lkasfkfhwkhfiojwoijroihoehfiqhgiuqwioefhiqwheiufhipuqwheiufadshfhqwhfoihqiorf"),
			MixDigest:  common.BytesToHash(bytes.Repeat([]byte{0xff}, common.HashLength)),
			Nonce:      EncodeNonce(uint64(18446744073709551615)),
		},
		size: 702,
	},
	"zero": {
		jsonStr: `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000000000","sha3Uncles":"0x0000000000000000000000000000000000000000000000000000000000000000","miner":"0x0000000000000000000000000000000000000000","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x0","number":"0x0","gasLimit":"0x0","gasUsed":"0x0","timestamp":"0x0","extraData":"0x","mixHash":"0x0000000000000000000000000000000000000000000000000000000000000000","nonce":"0x0000000000000000","hash":"0xf2e3272871f9b8e0aa854241c4480e97f5641f2d160b9daaa4af5b70bc3e415a"}`,
		rlpStr:  "f901eda00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a00000000000000000000000000000000000000000000000000000000000000000ba00000000000000000000000000000000000000000000000000000000000000000880000000000000000",
		hash:    common.HexToHash("f2e3272871f9b8e0aa854241c4480e97f5641f2d160b9daaa4af5b70bc3e415a"),
		h: &Header{
			ParentHash: common.BytesToHash([]byte{}),
			UncleHash:  common.BytesToHash([]byte{}),
			Coinbase:   common.BytesToAddress([]byte{}),
			Root:       crypto.Keccak256Hash(nil),
			TxHash:     crypto.Keccak256Hash(nil),
			Bloom:      BytesToBloom(nil),
			Difficulty: new(big.Int).SetBytes([]byte{0}),
			Number:     new(big.Int).SetBytes([]byte{0}),
			GasLimit:   uint64(0),
			GasUsed:    uint64(0),
			Time:       new(big.Int).SetBytes([]byte{0}),
			Extra:      []byte{},
			MixDigest:  common.BytesToHash([]byte{0}),
			Nonce:      EncodeNonce(uint64(0)),
		},
		size: 544,
	},
	"empty": {
		jsonStr: `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000000000","sha3Uncles":"0x0000000000000000000000000000000000000000000000000000000000000000","miner":"0x0000000000000000000000000000000000000000","stateRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","transactionsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x0","number":"0x0","gasLimit":"0x0","gasUsed":"0x0","timestamp":"0x0","extraData":"0x","mixHash":"0x0000000000000000000000000000000000000000000000000000000000000000","nonce":"0x0000000000000000","hash":"0xc3bd2d00745c03048a5616146a96f5ff78e54efb9e5b04af208cdaff6f3830ee"}`,
		rlpStr:  "f901eda00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000ba00000000000000000000000000000000000000000000000000000000000000000880000000000000000",
		hash:    common.HexToHash("c3bd2d00745c03048a5616146a96f5ff78e54efb9e5b04af208cdaff6f3830ee"),
		h: &Header{
			Extra:      []byte{},
			Difficulty: new(big.Int).SetBytes([]byte{0}),
			Number:     new(big.Int).SetBytes([]byte{0}),
			Time:       new(big.Int).SetBytes([]byte{0}),
		},
		size: 544,
	},
	"json field error": {
		jsonStr:        `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x00000000000000000000000000000001238abcdd","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"lkajsdo","number":"0x1","gasLimit":"0x1388","gasUsed":"0x12c","timestamp":"0x5c64b546","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("json: cannot unmarshal hex string without 0x prefix into Go value of type *hexutil.Big"),
	},
	"json format error": {
		jsonStr:        `"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x00000000000000000000000000000001238abcdd","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"lkajsdo","number":"0x1","gasLimit":"0x1388","gasUsed":"0x12c","timestamp":"0x5c64b546","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("invalid character ':' after top-level value"),
	},
	"json missing ParentHash": {
		jsonStr:        `{"sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x00000000000000000000000000000001238abcdd","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x989680","number":"0x1","gasLimit":"0x1388","gasUsed":"0x12c","timestamp":"0x5c64b546","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("missing required field 'parentHash' for Header"),
	},
	"json missing uncle": {
		jsonStr:        `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","miner":"0x00000000000000000000000000000001238abcdd","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x989680","number":"0x1","gasLimit":"0x1388","gasUsed":"0x12c","timestamp":"0x5c64b546","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("missing required field 'sha3Uncles' for Header"),
	},
	"json missing miner": {
		jsonStr:        `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x989680","number":"0x1","gasLimit":"0x1388","gasUsed":"0x12c","timestamp":"0x5c64b546","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("missing required field 'miner' for Header"),
	},
	"json missing root": {
		jsonStr:        `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x00000000000000000000000000000001238abcdd","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x989680","number":"0x1","gasLimit":"0x1388","gasUsed":"0x12c","timestamp":"0x5c64b546","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("missing required field 'stateRoot' for Header"),
	},
	"json missing TxHash": {
		jsonStr:        `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x00000000000000000000000000000001238abcdd","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x989680","number":"0x1","gasLimit":"0x1388","gasUsed":"0x12c","timestamp":"0x5c64b546","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("missing required field 'transactionsRoot' for Header"),
	},
	"json missing ReceiptHash": {
		jsonStr:        `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x00000000000000000000000000000001238abcdd","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x989680","number":"0x1","gasLimit":"0x1388","gasUsed":"0x12c","timestamp":"0x5c64b546","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("missing required field 'receiptsRoot' for Header"),
	},
	"json missing Bloom": {
		jsonStr:        `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x00000000000000000000000000000001238abcdd","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x989680","number":"0x1","gasLimit":"0x1388","gasUsed":"0x12c","timestamp":"0x5c64b546","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("missing required field 'logsBloom' for Header"),
	},
	"json missing Difficulty": {
		jsonStr:        `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x00000000000000000000000000000001238abcdd","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","number":"0x1","gasLimit":"0x1388","gasUsed":"0x12c","timestamp":"0x5c64b546","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("missing required field 'difficulty' for Header"),
	},
	"json missing Number": {
		jsonStr:        `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x00000000000000000000000000000001238abcdd","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x989680","gasLimit":"0x1388","gasUsed":"0x12c","timestamp":"0x5c64b546","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("missing required field 'number' for Header"),
	},
	"json missing GasLimit": {
		jsonStr:        `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x00000000000000000000000000000001238abcdd","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x989680","number":"0x1","gasUsed":"0x12c","timestamp":"0x5c64b546","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("missing required field 'gasLimit' for Header"),
	},
	"json missing GasUsed": {
		jsonStr:        `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x00000000000000000000000000000001238abcdd","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x989680","number":"0x1","gasLimit":"0x1388","timestamp":"0x5c64b546","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("missing required field 'gasUsed' for Header"),
	},
	"json missing Time": {
		jsonStr:        `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x00000000000000000000000000000001238abcdd","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x989680","number":"0x1","gasLimit":"0x1388","gasUsed":"0x12c","extraData":"0x","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("missing required field 'timestamp' for Header"),
	},
	"json missing Extra": {
		jsonStr:        `{"parentHash":"0x0000000000000000000000000000000000000000000000000000000000abcdef","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","miner":"0x00000000000000000000000000000001238abcdd","stateRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","transactionsRoot":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","receiptsRoot":"0x0000000000000000000000000000000000000000000000000000000000000000","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","difficulty":"0x989680","number":"0x1","gasLimit":"0x1388","timestamp":"0x5c64b546","gasUsed":"0x12c","mixHash":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nonce":"0x000000000000000a","hash":"0x2a365e3eb87f560b74f6c45f5dcc53cfbe7e49cc030d8bfbb3ace7bdc5ed6763"}`,
		unmarshalError: errors.New("missing required field 'extraData' for Header"),
	},
}

// TestHeader_Hash test Header.Hash
func TestHeader_Hash(t *testing.T) {
	for name, test := range testHeaderData {
		if test.h == nil || bytes.Equal(test.hash.Bytes(), common.FromHex("")) {
			continue
		}
		res := test.h.Hash()
		if !bytes.Equal(res.Bytes(), test.hash.Bytes()) {
			t.Errorf("Test %s have unexpected value\nGot %x\nWant %x", name, res, test.hash)
		}
	}
}

// TestHeader_Size test Header.size
func TestHeader_Size(t *testing.T) {
	for name, test := range testHeaderData {
		if test.h == nil || test.size == common.StorageSize(0) {
			continue
		}
		res := test.h.Size()
		if res != test.size {
			t.Errorf("Test %s have unexpected size\nGot:  %v\nWant: %v", name, res, test.size)
		}
	}
}

// TestHeader_MarshalJSON test json.Marshal(Header).
// Does not call header.MarshalJSON directly.
func TestHeader_MarshalJSON(t *testing.T) {
	for name, test := range testHeaderData {
		if test.h == nil || (test.jsonStr == "" && test.marshalError == nil) {
			continue
		}
		res, err := json.Marshal(*test.h)
		CheckError(t, name, err, test.marshalError)
		if !bytes.Equal(res, []byte(test.jsonStr)) {
			t.Errorf("Test %s->%s unexpected value\nGot:  %s\nWant: %s", "marshal", name, res, test.jsonStr)
		}
	}
}

// TestHeader_MarshalJSON test json.Unmarshal(Header).
// Does not call header.MarshalJSON directly.
func TestHeader_UnmarshalJSON(t *testing.T) {
	for name, test := range testHeaderData {
		if test.jsonStr == "" || (test.h == nil && test.unmarshalError == nil) {
			continue
		}
		var h Header
		err := json.Unmarshal([]byte(test.jsonStr), &h)
		CheckError(t, name, err, test.unmarshalError)
		if err != nil {
			continue
		}
		CheckEquality(t, name, "marshal", h, *test.h)
	}
}

// TestHeader_EncodeRLP test Header.EncodeRLP.
// Header use the default rlp schema. Although no code presented, it has to be tested anyway.
func TestHeader_EncodeRLP(t *testing.T) {
	for name, test := range testHeaderData {
		if test.h == nil || test.rlpStr == "" {
			continue
		}
		res, err := rlp.EncodeToBytes(*test.h)
		if err != nil {
			t.Errorf("Cannot encode rlp for %s: %s", name, err.Error())
		}
		if !bytes.Equal(res, common.FromHex(test.rlpStr)) {
			t.Errorf("EncodeRLP %s return unexpected value\nGot:  %x\nWant: %x", name, res, test.rlpStr)
		}
	}
}

// TestHeader_DecodeRLP test Header.DecodeRLP.
// Header use the default rlp schema. Although no code presented, it has to be tested anyway.
func TestHeader_DecodeRLP(t *testing.T) {
	for name, test := range testHeaderData {
		if test.h == nil || test.rlpStr == "" {
			continue
		}
		var h Header
		err := rlp.DecodeBytes(common.FromHex(test.rlpStr), &h)
		CheckError(t, name, err, nil)
		CheckEquality(t, name, "header", h, *test.h)
	}
}

// ,---.|              |        --.--          |
// |---.|    ,---.,---.|__/       |  ,---.,---.|--- ,---.
// |   ||    |   ||    |  \       |  |---'`---.|    `---.
// `---'`---'`---'`---'`   `      `  `---'`---'`---'`---'

var testUncleHeaders = []*Header{
	{
		ParentHash: common.HexToHash("abcdef"),
		UncleHash:  EmptyUncleHash,
		Coinbase:   common.HexToAddress("01238abcdd"),
		Root:       crypto.Keccak256Hash([]byte("1")),
		TxHash:     crypto.Keccak256Hash([]byte("11")),
		Bloom:      BytesToBloom(nil),
		Difficulty: big.NewInt(10000000),
		Number:     big.NewInt(50),
		GasLimit:   uint64(5000),
		GasUsed:    uint64(300),
		Time:       big.NewInt(1550103878),
		Extra:      []byte{},
		MixDigest:  crypto.Keccak256Hash(nil),
		Nonce:      EncodeNonce(uint64(1)),
	},
	{
		ParentHash: common.HexToHash("abcdef"),
		UncleHash:  EmptyUncleHash,
		Coinbase:   common.HexToAddress("01238abcdd"),
		Root:       crypto.Keccak256Hash([]byte("2")),
		TxHash:     crypto.Keccak256Hash([]byte("22")),
		Bloom:      BytesToBloom(nil),
		Difficulty: big.NewInt(10000000),
		Number:     big.NewInt(50),
		GasLimit:   uint64(5000),
		GasUsed:    uint64(300),
		Time:       big.NewInt(1550103888),
		Extra:      []byte{},
		MixDigest:  crypto.Keccak256Hash(nil),
		Nonce:      EncodeNonce(uint64(2)),
	},
	{
		ParentHash: common.HexToHash("abcdef"),
		UncleHash:  EmptyUncleHash,
		Coinbase:   common.HexToAddress("01238abcdd"),
		Root:       crypto.Keccak256Hash([]byte("3")),
		TxHash:     crypto.Keccak256Hash([]byte("33")),
		Bloom:      BytesToBloom(nil),
		Difficulty: big.NewInt(10000000),
		Number:     big.NewInt(50),
		GasLimit:   uint64(5000),
		GasUsed:    uint64(300),
		Time:       big.NewInt(1550103812),
		Extra:      []byte{},
		MixDigest:  crypto.Keccak256Hash(nil),
		Nonce:      EncodeNonce(uint64(3)),
	},
}

var testBlockData = map[string]struct {
	rlp                   []byte
	storageRLP            []byte
	b                     *Block
	RLPDecodeError        error
	StorageRLPDecodeError error
	size                  common.StorageSize
	hash                  common.Hash
}{
	"ok": {
		rlp:        common.FromHex("f9041df901f8a00000000000000000000000000000000000000000000000000000000000abcdefa0005e7aeadc1168ddf9d67136d83a98225b7d2263838305f1a763df451ae6f80e9400000000000000000000000000000001238abcdda0c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6a0005e7aeadc1168ddf9d67136d83a98225b7d2263838305f1a763df451ae6f80ea0817577080c4a756c118e6f3073b359200607686e3f2a402affbfab838d98c45cb90100100008650009840d8109085200088c01a100000305805a51002040122041208401200008088600322450391081810120281060f0d410d000853015416a048222001e0ed04280020a20224801b042404a0a9010809320a6a19417a60092000601d8a60200548381000001e00a065a8804b23105c3330400682c400011004000c260448420080000951581640110295389664511c30145011850434e4049002051cc431a525098bca02808d509480058043b01140d088483e226d0000042832aa9001a19235e064248203018480115009430810b02221008a92260c4269077420001601268808420890a00001d34e85108aa0243182040800312e0880c08381003839896803282138882012c845c64b54680a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000001e3e201010394000000000000000000000000000000000000000101856162636466808080f901fbf901f8a00000000000000000000000000000000000000000000000000000000000abcdefa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479400000000000000000000000000000001238abcdda0ad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a5a0d4d1a59767271eefdc7830a772b9732a11d503531d972ab8c981a6b1c0e666e5a00000000000000000000000000000000000000000000000000000000000000000b9010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000839896803282138882012c845c64b55080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000002"),
		storageRLP: common.FromHex("f9041ef901f8a00000000000000000000000000000000000000000000000000000000000abcdefa0005e7aeadc1168ddf9d67136d83a98225b7d2263838305f1a763df451ae6f80e9400000000000000000000000000000001238abcdda0c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6a0005e7aeadc1168ddf9d67136d83a98225b7d2263838305f1a763df451ae6f80ea0817577080c4a756c118e6f3073b359200607686e3f2a402affbfab838d98c45cb90100100008650009840d8109085200088c01a100000305805a51002040122041208401200008088600322450391081810120281060f0d410d000853015416a048222001e0ed04280020a20224801b042404a0a9010809320a6a19417a60092000601d8a60200548381000001e00a065a8804b23105c3330400682c400011004000c260448420080000951581640110295389664511c30145011850434e4049002051cc431a525098bca02808d509480058043b01140d088483e226d0000042832aa9001a19235e064248203018480115009430810b02221008a92260c4269077420001601268808420890a00001d34e85108aa0243182040800312e0880c08381003839896803282138882012c845c64b54680a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000001e3e201010394000000000000000000000000000000000000000101856162636466808080f901fbf901f8a00000000000000000000000000000000000000000000000000000000000abcdefa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479400000000000000000000000000000001238abcdda0ad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a5a0d4d1a59767271eefdc7830a772b9732a11d503531d972ab8c981a6b1c0e666e5a00000000000000000000000000000000000000000000000000000000000000000bc845c64b55080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47088000000000000000280"),
		size:       common.StorageSize(1056),
		hash:       common.HexToHash("51a80f25084bbf86cc1deffac766991ff75bf6b8183cc7f994f5fe9dc1429b31"),
		b: &Block{
			header: &Header{
				ParentHash:  common.HexToHash("abcdef"),
				UncleHash:   common.HexToHash("005e7aeadc1168ddf9d67136d83a98225b7d2263838305f1a763df451ae6f80e"),
				Coinbase:    common.HexToAddress("01238abcdd"),
				Root:        crypto.Keccak256Hash([]byte("1")),
				TxHash:      common.HexToHash("005e7aeadc1168ddf9d67136d83a98225b7d2263838305f1a763df451ae6f80e"),
				ReceiptHash: common.HexToHash("817577080c4a756c118e6f3073b359200607686e3f2a402affbfab838d98c45c"),
				Bloom:       BytesToBloom(common.FromHex("100008650009840d8109085200088c01a100000305805a51002040122041208401200008088600322450391081810120281060f0d410d000853015416a048222001e0ed04280020a20224801b042404a0a9010809320a6a19417a60092000601d8a60200548381000001e00a065a8804b23105c3330400682c400011004000c260448420080000951581640110295389664511c30145011850434e4049002051cc431a525098bca02808d509480058043b01140d088483e226d0000042832aa9001a19235e064248203018480115009430810b02221008a92260c4269077420001601268808420890a00001d34e85108aa0243182040800312e0880c08381003")),
				Difficulty:  big.NewInt(10000000),
				Number:      big.NewInt(50),
				GasLimit:    uint64(5000),
				GasUsed:     uint64(300),
				Time:        big.NewInt(1550103878),
				Extra:       []byte{},
				MixDigest:   crypto.Keccak256Hash(nil),
				Nonce:       EncodeNonce(uint64(1)),
			},
			uncles: []*Header{
				{
					ParentHash: common.HexToHash("abcdef"),
					UncleHash:  EmptyUncleHash,
					Coinbase:   common.HexToAddress("01238abcdd"),
					Root:       crypto.Keccak256Hash([]byte("2")),
					TxHash:     crypto.Keccak256Hash([]byte("22")),
					Bloom:      BytesToBloom(nil),
					Difficulty: big.NewInt(10000000),
					Number:     big.NewInt(50),
					GasLimit:   uint64(5000),
					GasUsed:    uint64(300),
					Time:       big.NewInt(1550103888),
					Extra:      []byte{},
					MixDigest:  crypto.Keccak256Hash(nil),
					Nonce:      EncodeNonce(uint64(2)),
				},
			},
			transactions: Transactions{
				NewTransaction(uint64(1), common.BytesToAddress([]byte{1}), common.Big1, uint64(3),
					common.Big1, []byte("abcdf")),
			},
		},
	},
	"corner": {
		rlp:        common.FromHex("f90de5f90a3ea0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94ffffffffffffffffffffffffffffffffffffffffa0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb90100100008650009840d8109085200088c01a100000305805a51002040122041208401200008088600322450391081810120281060f0d410d000853015416a048222001e0ed04280020a20224801b042404a0a9010809320a6a19417a60092000601d8a60200548381000001e00a065a8804b23105c3330400682c400011004000c260448420080000951581640110295389664511c30145011850434e4049002051cc431a525098bca02808d509480058043b01140d088483e226d0000042832aa9001a19235e064248203018480115009430810b02221008a92260c4269077420001601268808420890a00001d34e85108aa0243182040800312e0880c083810039506b7e8671fb6c3a4573d5c2df58de7d0ae37313e79949a5db13dc9d75a26c672890484f08ee7f2625ae288ffffffffffffffff88ffffffffffffffff9603723cd4ca20aef41e16171f02a90ea2dc0ff58353a3b90800ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88fffffffffffffffff8ffe201010394000000000000000000000000000000000000000101856162636466808080f8da88ffffffffffffffff920ebcbee2f77de396ca982b9d98472d938f9488ffffffffffffffff940000000000000000000089f1089f1089f1089f10920ebcbee2f77de396ca982b9d98472d938f94b864ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80920ebcbee2f77de396ca982b9d98472d938f94920ebcbee2f77de396ca982b9d98472d938f94f902a0f9029da0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94ffffffffffffffffffffffffffffffffffffffffa0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a00000000000000000000000000000000000000000000000000000000000000000b9010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000616b73646f6b617364666b6b6173646f666f6173646f66617369646f696669616c7364669d0704ebd4dc6d69350165b27b31810a6465715d8f7bfd236a6bca5742f49b48864c2688b151ff985846d0c66ec6187732f4ce376f3e6a77a72688ffffffffffffffff88ffffffffffffffff9a32ff0a68a8381f7e82b79d927fd942f325c2722414e05d3c7d13b84d6c6b6173666b6668776b6866696f6a776f696a726f69686f6568666971686769757177696f65666869717768656975666869707571776865697566616473686668717768666f696871696f7266a0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88ffffffffffffffff"),
		storageRLP: common.FromHex("f90de6f90a3ea0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94ffffffffffffffffffffffffffffffffffffffffa0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb90100100008650009840d8109085200088c01a100000305805a51002040122041208401200008088600322450391081810120281060f0d410d000853015416a048222001e0ed04280020a20224801b042404a0a9010809320a6a19417a60092000601d8a60200548381000001e00a065a8804b23105c3330400682c400011004000c260448420080000951581640110295389664511c30145011850434e4049002051cc431a525098bca02808d509480058043b01140d088483e226d0000042832aa9001a19235e064248203018480115009430810b02221008a92260c4269077420001601268808420890a00001d34e85108aa0243182040800312e0880c083810039506b7e8671fb6c3a4573d5c2df58de7d0ae37313e79949a5db13dc9d75a26c672890484f08ee7f2625ae288ffffffffffffffff88ffffffffffffffff9603723cd4ca20aef41e16171f02a90ea2dc0ff58353a3b90800ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88fffffffffffffffff8ffe201010394000000000000000000000000000000000000000101856162636466808080f8da88ffffffffffffffff920ebcbee2f77de396ca982b9d98472d938f9488ffffffffffffffff940000000000000000000089f1089f1089f1089f10920ebcbee2f77de396ca982b9d98472d938f94b864ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80920ebcbee2f77de396ca982b9d98472d938f94920ebcbee2f77de396ca982b9d98472d938f94f902a0f9029da0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94ffffffffffffffffffffffffffffffffffffffffa0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a00000000000000000000000000000000000000000000000000000000000000000b9010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000616b73646f6b617364666b6b6173646f666f6173646f66617369646f696669616c7364669d0704ebd4dc6d69350165b27b31810a6465715d8f7bfd236a6bca5742f49b48864c2688b151ff985846d0c66ec6187732f4ce376f3e6a77a72688ffffffffffffffff88ffffffffffffffff9a32ff0a68a8381f7e82b79d927fd942f325c2722414e05d3c7d13b84d6c6b6173666b6668776b6866696f6a776f696a726f69686f6568666971686769757177696f65666869717768656975666869707571776865697566616473686668717768666f696871696f7266a0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88ffffffffffffffff80"),
		size:       common.StorageSize(3560),
		hash:       common.HexToHash("86a96c722192ccd1d338d465c10bd0d168740e14663a26e4d7eacb30c0f2f3fa"),
		b: &Block{
			header: &Header{
				ParentHash:  common.BytesToHash(bytes.Repeat([]byte{0xff}, common.HashLength)),
				UncleHash:   common.BytesToHash(bytes.Repeat([]byte{0xff}, common.HashLength)),
				Coinbase:    common.BytesToAddress(bytes.Repeat([]byte{0xff}, common.AddressLength)),
				Root:        common.BytesToHash(bytes.Repeat([]byte{0xff}, common.HashLength)),
				TxHash:      common.BytesToHash(bytes.Repeat([]byte{0xff}, common.HashLength)),
				ReceiptHash: common.BytesToHash(bytes.Repeat([]byte{0xff}, common.HashLength)),
				Bloom:       BytesToBloom(common.FromHex("100008650009840d8109085200088c01a100000305805a51002040122041208401200008088600322450391081810120281060f0d410d000853015416a048222001e0ed04280020a20224801b042404a0a9010809320a6a19417a60092000601d8a60200548381000001e00a065a8804b23105c3330400682c400011004000c260448420080000951581640110295389664511c30145011850434e4049002051cc431a525098bca02808d509480058043b01140d088483e226d0000042832aa9001a19235e064248203018480115009430810b02221008a92260c4269077420001601268808420890a00001d34e85108aa0243182040800312e0880c08381003")),
				Difficulty:  stringToBigInt("9818937891289378918927391723881923791823718923897", 10),
				Number:      stringToBigInt("881273987910461937891273781798127397189231729378", 10),
				GasLimit:    uint64(18446744073709551615),
				GasUsed:     uint64(18446744073709551615),
				Time:        stringToBigInt("1289391728937891239878172391298739128937891728937891", 10),
				Extra:       bytes.Repeat([]byte{0xff}, 2048),
				MixDigest:   common.BytesToHash(bytes.Repeat([]byte{0xff}, common.HashLength)),
				Nonce:       EncodeNonce(uint64(18446744073709551615)),
			},
			uncles: []*Header{
				{
					ParentHash: common.BytesToHash(bytes.Repeat([]byte{0xff}, common.HashLength)),
					UncleHash:  common.BytesToHash(bytes.Repeat([]byte{0xff}, common.HashLength)),
					Coinbase:   common.BytesToAddress(bytes.Repeat([]byte{0xff}, common.AddressLength)),
					Root:       crypto.Keccak256Hash(nil),
					TxHash:     crypto.Keccak256Hash(nil),
					Bloom:      BytesToBloom([]byte("aksdokasdfkkasdofoasdofasidoifialsdf")),
					Difficulty: stringToBigInt("189237891283981841912398912938971297391782973891278301270974091707124", 10),
					Number:     stringToBigInt("29834889734294147190284012389182308190271129837917327105109501734", 10),
					GasLimit:   uint64(18446744073709551615),
					GasUsed:    uint64(18446744073709551615),
					Time:       stringToBigInt("81947818378918957852384019701902478917389127381912317241097491", 10),
					Extra:      []byte("lkasfkfhwkhfiojwoijroihoehfiqhgiuqwioefhiqwheiufhipuqwheiufadshfhqwhfoihqiorf"),
					MixDigest:  common.BytesToHash(bytes.Repeat([]byte{0xff}, common.HashLength)),
					Nonce:      EncodeNonce(uint64(18446744073709551615)),
				},
			},
			transactions: Transactions{
				NewTransaction(uint64(1), common.BytesToAddress([]byte{1}), common.Big1, uint64(3),
					common.Big1, []byte("abcdf")),
				&Transaction{data: txdata{
					uint64(18446744073709551615),
					stringToBigInt("1283798819823798174879817892379812789718932", 10),
					uint64(18446744073709551615),
					hex2Address(strings.Repeat("89f10", 4)),
					stringToBigInt("1283798819823798174879817892379812789718932", 10),
					bytes.Repeat([]byte{0xff}, 100),

					common.Big0,
					stringToBigInt("1283798819823798174879817892379812789718932", 10),
					stringToBigInt("1283798819823798174879817892379812789718932", 10),
					hex2Hash(strings.Repeat("89f1", 8)),
				},
				},
			},
		},
	},
	"empty": {
		rlp:        common.FromHex("f901f2f901eda00000000000000000000000000000000000000000000000000000000000abcdefa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421ba00000000000000000000000000000000000000000000000000000000000000000880000000000000000c0c0"),
		storageRLP: common.FromHex("f901f3f901eda00000000000000000000000000000000000000000000000000000000000abcdefa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421ba00000000000000000000000000000000000000000000000000000000000000000880000000000000000c0c080"),
		size:       common.StorageSize(501),
		hash:       common.HexToHash("045890dab156f0c95c60fca07c82d8e60b464f9bc46b78ffc18411cfa898cbbb"),
		b: &Block{
			header: &Header{
				ParentHash:  common.HexToHash("abcdef"),
				UncleHash:   EmptyUncleHash,
				Coinbase:    common.Address{},
				Root:        EmptyRootHash,
				TxHash:      EmptyRootHash,
				ReceiptHash: EmptyRootHash,
				Bloom:       BytesToBloom([]byte{}),
				Number:      new(big.Int),
				Difficulty:  new(big.Int),
				Time:        new(big.Int),
			},
			uncles:       []*Header{},
			transactions: Transactions{},
		},
	},
	"decodeError": {
		rlp:                   common.FromHex("901f2f901eda00000000000000000000000000000000000000000000000000000000000abcdefa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421ba00000000000000000000000000000000000000000000000000000000000000000880000000000000000c0c0"),
		storageRLP:            common.FromHex("f9041ef901fa00000000000000000000000000000000000000000000000000000000000abcdefa0005e7aeadc1168ddf9d67136d83a98225b7d2263838305f1a763df451ae6f80e9400000000000000000000000000000001238abcdda0c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6a0005e7aeadc1168ddf9d67136d83a98225b7d2263838305f1a763df451ae6f80ea0817577080c4a756c118e6f3073b359200607686e3f2a402affbfab838d98c45cb90100100008650009840d8109085200088c01a100000305805a51002040122041208401200008088600322450391081810120281060f0d410d000853015416a048222001e0ed04280020a20224801b042404a0a9010809320a6a19417a60092000601d8a60200548381000001e00a065a8804b23105c3330400682c400011004000c260448420080000951581640110295389664511c30145011850434e4049002051cc431a525098bca02808d509480058043b01140d088483e226d0000042832aa9001a19235e064248203018480115009430810b02221008a92260c4269077420001601268808420890a00001d34e85108aa0243182040800312e0880c08381003839896803282138882012c845c64b54680a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470880000000000000001e3e201010394000000000000000000000000000000000000000101856162636466808080f901fbf901f8a00000000000000000000000000000000000000000000000000000000000abcdefa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479400000000000000000000000000000001238abcdda0ad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a5a0d4d1a59767271eefdc7830a772b9732a11d503531d972ab8c981a6b1c0e666e5a00000000000000000000000000000000000000000000000000000000000000000bc845c64b55080a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47088000000000000000280"),
		RLPDecodeError:        errors.New("rlp: expected input list for types.extblock"),
		StorageRLPDecodeError: errors.New("rlp: expected input list for types.storageblock"),
	},
}

// TestNewBlock test NewBlock with randomly generated receipt, transaction, and pre-defined uncles.
// 1. Generate a new block with data having length larger than 1
// 2. Check the calculated fields in header and body is exactly expected.
// 3. Check the header data is expected as the original.
func TestNewBlock(t *testing.T) {
	txLen := 10
	txs := make(Transactions, txLen)
	receipts := make(Receipts, txLen)
	for i := 0; i != txLen; i++ {
		txs[i], receipts[i] = MakeTransactionWithReceipt(common.Address{})
	}
	h := Header{
		ParentHash: common.HexToHash("0x001200102301023"),
		Coinbase:   common.HexToAddress("0x111"),
		Time:       big.NewInt(1203989018),
	}

	b := NewBlock(&h, txs, testUncleHeaders, receipts)
	txHash := DeriveSha(txs)
	if b.header.TxHash != txHash {
		t.Errorf("Transction hash\nGot:  %x\nWant: %x", b.header.TxHash, txHash)
	}
	if !reflect.DeepEqual(b.transactions, txs) {
		t.Errorf("b.transactions is not exactly the same")
	}
	recHash := DeriveSha(receipts)
	if b.header.ReceiptHash != recHash {
		t.Errorf("ReceiptHash\nGot:  %x\nWant: %x", b.header.ReceiptHash, recHash)
	}
	for _, r := range receipts {
		// Look up for receipt.Logs address
		for _, log := range r.Logs {
			if !BloomLookup(b.header.Bloom, log.Address) {
				t.Errorf("b.header.Bloom does not contain key %x", log.Address)
			}
		}
	}
	uncleHash := rlpHash(testUncleHeaders)
	if b.header.UncleHash != uncleHash {
		t.Errorf("Uncle hash not equal\nGot %x\nWant %x", b.header.UncleHash, uncleHash)
	}
	if !reflect.DeepEqual(b.uncles, testUncleHeaders) {
		t.Errorf("b.uncles is not exactly the same.")
	}
	h.TxHash = txHash
	h.ReceiptHash = recHash
	h.UncleHash = uncleHash
	h.Bloom = CreateBloom(receipts)

	CheckEquality(t, "_", "header", b.header, &h)
	if &h == b.header {
		t.Errorf("NewBlock does not copy the header address.\nGot %p\nDont want %p", &h, b.header)
	}
}

// TestNewBlockEmpty test NewBlock with empty txs, uncles and receipts.
func TestNewBlockEmpty(t *testing.T) {
	h := Header{
		ParentHash: common.HexToHash("0x001200102301023"),
		Coinbase:   common.HexToAddress("0x111"),
		Time:       big.NewInt(1203989018),
	}
	b := NewBlock(&h, []*Transaction{}, []*Header{}, []*Receipt{})

	if b.header.TxHash != EmptyRootHash || b.transactions != nil {
		t.Errorf("Block transaction not empty")
	}
	if b.header.ReceiptHash != EmptyRootHash || b.header.Bloom != *new(Bloom) {
		t.Errorf("Block receipt not empty")
	}
	if b.header.UncleHash != EmptyUncleHash || b.uncles != nil {
		t.Errorf("Block uncle not empty")
	}
}

// TestNewBlockWithHeader test NewBlockWithHeader.
// This test case also test function CopyHeader
func TestNewBlockWithHeader(t *testing.T) {
	tests := map[string]*Header{
		"ok": {
			ParentHash: common.HexToHash("0x001200102301023"),
			Coinbase:   common.HexToAddress("0x111"),
			Time:       big.NewInt(1203989018),
			Difficulty: big.NewInt(999999999999999),
			Number:     big.NewInt(19999),
			Extra:      common.FromHex("1234567890abcdef"),
		},
		"empty": {
			ParentHash: common.HexToHash("0x001200102301023"),
			Coinbase:   common.HexToAddress("0x111"),
		},
	}
	for name, test := range tests {
		b := NewBlockWithHeader(test)
		CheckEquality(t, name, "header", b.header, test)
	}
}

// TestBlock_EncodeRLP test Block.EncodeRLP by calling rlp.EncodeToBytes.
func TestBlock_EncodeRLP(t *testing.T) {
	for name, test := range testBlockData {
		if test.b == nil {
			continue
		}
		var b = &Block{}
		*b = *test.b
		res, err := rlp.EncodeToBytes(b)

		CheckError(t, name, err, nil)
		if err != nil {
			continue
		}
		CheckEquality(t, name, "rlp", res, test.rlp)
	}
}

// TestBlock_EncodeRLP test Block.DecodeRLP by calling rlp.DecodeBytes.
func TestBlock_DecodeRLP(t *testing.T) {
	for name, test := range testBlockData {
		var b *Block
		err := rlp.DecodeBytes(test.rlp, &b)
		CheckError(t, name, err, test.RLPDecodeError)
		if err != nil {
			continue
		}

		target := *test.b
		CheckEquality(t, name, "header", b.header, target.header)
		CheckEquality(t, name, "transactions", b.transactions, target.transactions)
		CheckEquality(t, name, "uncles", b.uncles, target.uncles)

	}
}

// TestStorageBlock_EncodeRLP test EncodeRLP for StorageBlock
func TestStorageBlock_EncodeRLP(t *testing.T) {
	for name, test := range testBlockData {
		if test.b == nil {
			continue
		}
		data := *test.b
		sb := storageblock{
			Header: data.header,
			Txs:    data.transactions,
			Uncles: data.uncles,
		}
		if data.td != nil {
			sb.TD = new(big.Int).Set(data.td)
		}
		res, err := rlp.EncodeToBytes(sb)
		CheckError(t, name, err, nil)
		if !bytes.Equal(res, test.storageRLP) {
			t.Errorf("TestStorageBlock_EncodeRLP for %s\nGot %x\nWant %x", name, res, test.storageRLP)
		}
	}
}

// TestStorageBlock_DecodeRLP test StorageBlock.DecodeRLP
func TestStorageBlock_DecodeRLP(t *testing.T) {
	for name, test := range testBlockData {
		if test.storageRLP == nil || (test.b == nil && test.StorageRLPDecodeError == nil) {
			continue
		}

		var res *StorageBlock
		err := rlp.DecodeBytes(test.storageRLP, &res)
		CheckError(t, name, err, test.StorageRLPDecodeError)
		if err != nil {
			continue
		}
		target := *test.b
		CheckEquality(t, name, "header", res.header, target.header)
		CheckEquality(t, name, "transactions", res.transactions, target.transactions)
		CheckEquality(t, name, "uncles", res.uncles, target.uncles)
		CheckEquality(t, name, "td", res.td, target.td)
	}
}

// TestBlock_Attributes test attribute functions for Block
func TestBlock_Attributes(t *testing.T) {
	for name, test := range testBlockData {
		if test.b == nil {
			continue
		}
		b := *test.b
		// Check Block.Uncles()
		uncles := b.Uncles()
		CheckEquality(t, name, "uncles", uncles, b.uncles)
		// Check Block.Transactions()
		txs := b.Transactions()
		CheckEquality(t, name, "transactions", txs, b.transactions)
		// Check Number
		num := b.Number()
		CheckEquality(t, name, "Number", num, b.header.Number)
		// Check GasLimit
		gasLimit := b.GasLimit()
		CheckEquality(t, name, "GasLimit", gasLimit, b.header.GasLimit)
		// Check GasUsed
		gasUsed := b.GasUsed()
		CheckEquality(t, name, "GasUsed", gasUsed, b.header.GasUsed)
		// Check Difficulty
		diff := b.Difficulty()
		CheckEquality(t, name, "Difficulty", diff, b.header.Difficulty)
		// Check Time
		time := b.Time()
		CheckEquality(t, name, "Time", time, b.header.Time)
		// Check NumUint64. Dont check with uint64 overflow error
		if b.header.Number.Cmp(new(big.Int).SetUint64(math.MaxUint64)) < 0 {
			CheckEquality(t, name, "NumUint64", b.NumberU64(),
				b.header.Number.Uint64())
		}
		// Check MixDigest
		mixDigest := b.MixDigest()
		CheckEquality(t, name, "MixDigest", mixDigest, b.header.MixDigest)
		// Check Nonce
		nonce := b.Nonce()
		CheckEquality(t, name, "Nonce", nonce, b.header.Nonce.Uint64())
		// Check Bloom
		bl := b.Bloom()
		CheckEquality(t, name, "Bloom", bl, b.header.Bloom)
		// Check coinbase
		cb := b.Coinbase()
		CheckEquality(t, name, "Bloom", cb, b.header.Coinbase)
		// Check Root
		rt := b.Root()
		CheckEquality(t, name, "Root", rt, b.header.Root)
		// Check ParentHash
		ph := b.ParentHash()
		CheckEquality(t, name, "ParentHash", ph, b.header.ParentHash)
		// Check txHash
		th := b.TxHash()
		CheckEquality(t, name, "TxHash", th, b.header.TxHash)
		// Check ReceiptHash
		rh := b.ReceiptHash()
		CheckEquality(t, name, "ReceiptHash", rh, b.header.ReceiptHash)
		// Check UncleHash
		uh := b.UncleHash()
		CheckEquality(t, name, "UncleHash", uh, b.header.UncleHash)
		// Check Extra
		ext := b.Extra()
		CheckEquality(t, name, "Extra", ext, b.header.Extra)
		// Check Header
		h := b.Header()
		CheckEquality(t, name, "Header", h, b.header)
		if h == b.header {
			t.Errorf("TestBlock_Attributes: %s.Header return the original header address", name)
		}
		// Check Body
		bd := b.Body()
		CheckEquality(t, name, "Body.transactions", Transactions(bd.Transactions), b.transactions)
		CheckEquality(t, name, "Body.uncles", bd.Uncles, b.uncles)
		// Check DeprecatedTd
		td := b.DeprecatedTd()
		CheckEquality(t, name, "DeprecatedTD", td, b.td)
	}
}

// TestTransaction test Block.Transaction
// 1. Make some random transactions
// 2. Create a block with created transactions
// 3. Test whether Transaction return expected transaction for found ones
// 4. Test whether Transaction return nil for unfound ones
func TestBlock_Transaction(t *testing.T) {
	positive := make([]*Transaction, 0, 10)
	negative := make([]common.Hash, 0, 5)
	for i := 0; i != 10; i++ {
		tx := MakeRandomTransaction()
		positive = append(positive, tx)
	}
	for i := 0; i != 5; i++ {
		buf := make([]byte, common.HashLength)
		_, err := r.Read(buf)
		if err != nil {
			t.Fatalf("Cannot generate a random hash")
		}
		negative = append(negative, common.BytesToHash(buf))
	}
	h := MakeRandomHeader(RandomHash, RandomBigInt)
	b := NewBlock(h, positive, []*Header{}, []*Receipt{})

	// Test positive an negative Transaction
	for i, tx := range positive {
		hash := tx.Hash()
		got := b.Transaction(hash)
		if got == nil {
			t.Fatalf("Transaction %x not found", hash)
		}
		CheckEquality(t, fmt.Sprintf("positive[%d]", i), "", got, tx)
	}
	for _, hash := range negative {
		got := b.Transaction(hash)
		if got != nil {
			t.Fatalf("Transaction unexpectedly found %x", hash)
		}
	}
}

// TestBlock_Size test Block.size.
// 1. Call size() on the current block
// 2. Make a copy of the original Transactions
// 3. Append a new transaction of transactions ans assign it to block
// 4. Call size again, the code will read the previous stored size and value should not be changed.
func TestBlock_Size(t *testing.T) {
	for name, test := range testBlockData {
		if test.b == nil {
			continue
		}
		b := *test.b
		size := b.Size()
		if size != test.size {
			t.Errorf("TestBlock_Size: %s.size\nGot %v\nWant %v", name, size, test.size)
		}
		// Append a new transaction
		newTx := NewTransaction(0, common.Address{}, new(big.Int), 0, new(big.Int), []byte{})
		b.transactions = append(b.transactions, newTx)
		// Call size again, should return the same size as previous
		CheckEquality(t, name, "NewSize is not same as original.", b.Size(), size)
	}
}

// TestBlock_WithSeal test Block.WithSeal
// 1. Make a random block, and then make a random header.
// 2. Call WithSeal to overwrite header to the block
// 3. Check the returned block as desired.
func TestBlock_WithSeal(t *testing.T) {
	b := MakeRandomBlockForTest(10, 3, RandomBigInt)
	h := MakeRandomHeader(RandomHash, RandomBigInt)
	nb := b.WithSeal(h)
	if nb == b {
		t.Fatalf("WithSeal does not return a copy of original block.")
	}
	CheckEquality(t, "random", "header", nb.header, h)
	CheckEquality(t, "random", "transactions", nb.transactions, b.transactions)
	CheckEquality(t, "random", "uncles", nb.uncles, b.uncles)
}

// TestBlock_WithBody test Block.WithBody
// 1. Make a random block
// 2. Make random transactions and random uncles
// 3. Call with body
// 4. Check the return value is as desired.
func TestBlock_WithBody(t *testing.T) {
	b := MakeRandomBlockForTest(10, 3, RandomBigInt)
	newTxs := make([]*Transaction, 0, 20)
	for i := 0; i != 20; i++ {
		newTxs = append(newTxs, MakeRandomTransaction())
	}
	newUncles := make([]*Header, 0, 10)
	for i := 0; i != 10; i++ {
		newUncles = append(newUncles, MakeRandomHeader(RandomHash, RandomBigInt))
	}
	nb := b.WithBody(newTxs, newUncles)
	if nb == b {
		t.Fatalf("WithBody does not return a new block")
	}
	CheckEquality(t, "_", "header", nb.header, b.header)
	CheckEquality(t, "_", "transactions", nb.transactions, Transactions(newTxs))
	CheckEquality(t, "_", "uncles", nb.uncles, newUncles)
}

// TestBlock_Hash test block.Hash()
// 1. Loops over testBlockData.
// 2. Call Hash for each data.
// 3. Modify a Header field
// 4. Hash again
// 5. The hash shall make no difference
func TestBlock_Hash(t *testing.T) {
	for name, test := range testBlockData {
		if test.b == nil {
			continue
		}
		b := *test.b
		hash := b.Hash()
		CheckEquality(t, name, "hash", hash, test.hash)
		b.header.GasUsed = r.Uint64()
		newHash := b.Hash()
		CheckEquality(t, name, "newHash", newHash, hash)
	}
}

// TestBlock_Sorting test Blocks sorting for function Number.
// This sorting is supposed to sort block by number.
// 1. Make random blocks
// 2. Sort Blocks using number
// 3. Check whether number decreases
func TestBlock_Sorting(t *testing.T) {
	len := 100
	blks := make(Blocks, 0, len)
	for i := 0; i != len; i++ {
		blks = append(blks, MakeRandomBlockForTest(0, 0, RandomBigInt))
	}
	// Sort blocks
	fn := BlockBy(Number)
	fn.Sort(blks)

	var pre *big.Int
	for i, blk := range blks {
		if pre == nil {
			pre = new(big.Int).Set(blk.header.Number)
			continue
		}
		if pre.Cmp(blk.header.Number) > 0 {
			t.Fatalf("TestBlock_Sorting result does not have expected order\n%d: %v\n%d: %v",
				i-1, pre, i, blk.header.Number)
		}
		pre = new(big.Int).Set(blk.header.Number)
	}
}

// _______ _________          _______  _______   _________ _______  _______ _________ _______
// (  ____ \\__   __/|\     /|(  ____ \(  ____ )  \__   __/(  ____ \(  ____ \\__   __/(  ____ \
// | (    \/   ) (   | )   ( || (    \/| (    )|     ) (   | (    \/| (    \/   ) (   | (    \/
// | (__       | |   | (___) || (__    | (____)|     | |   | (__    | (_____    | |   | (_____
// |  __)      | |   |  ___  ||  __)   |     __)     | |   |  __)   (_____  )   | |   (_____  )
// | (         | |   | (   ) || (      | (\ (        | |   | (            ) |   | |         ) |
// | (____/\   | |   | )   ( || (____/\| ) \ \__     | |   | (____/\/\____) |   | |   /\____) |
// (_______/   )_(   |/     \|(_______/|/   \__/     )_(   (_______/\_______)   )_(   \_______)
//
// The values in those tests are from the Transaction Tests
// at github.com/ethereum/tests.

func TestBlockEncoding(t *testing.T) {
	blockEnc := common.FromHex("f90260f901f9a083cafc574e1f51ba9dc0568fc617a08ea2429fb384059c972f13b19fa1c8dd55a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948888f1f195afa192cfee860698584c030f4c9db1a0ef1552a40b7165c3cd773806b9e0c165b75356e0314bf0706f279c729f51e017a05fe50b260da6308036625b850b5d6ced6d0a9f814c0688bc91ffb7b7a3a54b67a0bc37d79753ad738a6dac4921e57392f145d8887476de3f783dfa7edae9283e52bfefd8825208845506eb0780a0bd4472abb6659ebe3ee06ee4d7b72a00a9f4d001caca51342001075469aff49888a13a5a8c8f2bb1c4f861f85f800a82c35094095e7baea6a6c7c4c2dfeb977efac326af552d870a801ba09bea4c4daac7c7c52e093e6a4c35dbbcf8856f1af7b059ba20253e70848d094fa08a8fae537ce25ed8cb5af9adac3f141af69bd515bd2ba031522df09b97dd72b1c0")
	var block Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		t.Fatal("decode error: ", err)
	}

	check := func(f string, got, want interface{}) {
		if !reflect.DeepEqual(got, want) {
			t.Errorf("%s mismatch: got %v, want %v", f, got, want)
		}
	}
	check("Difficulty", block.Difficulty(), big.NewInt(131072))
	check("GasLimit", block.GasLimit(), uint64(3141592))
	check("GasUsed", block.GasUsed(), uint64(21000))
	check("Coinbase", block.Coinbase(), common.HexToAddress("8888f1f195afa192cfee860698584c030f4c9db1"))
	check("MixDigest", block.MixDigest(), common.HexToHash("bd4472abb6659ebe3ee06ee4d7b72a00a9f4d001caca51342001075469aff498"))
	check("Root", block.Root(), common.HexToHash("ef1552a40b7165c3cd773806b9e0c165b75356e0314bf0706f279c729f51e017"))
	check("Hash", block.Hash(), common.HexToHash("0a5843ac1cb04865017cb35a57b50b07084e5fcee39b5acadade33149f4fff9e"))
	check("Nonce", block.Nonce(), uint64(0xa13a5a8c8f2bb1c4))
	check("Time", block.Time(), big.NewInt(1426516743))
	check("size", block.Size(), common.StorageSize(len(blockEnc)))

	tx1 := NewTransaction(0, common.HexToAddress("095e7baea6a6c7c4c2dfeb977efac326af552d87"), big.NewInt(10), 50000, big.NewInt(10), nil)

	tx1, _ = tx1.WithSignature(HomesteadSigner{}, common.Hex2Bytes("9bea4c4daac7c7c52e093e6a4c35dbbcf8856f1af7b059ba20253e70848d094f8a8fae537ce25ed8cb5af9adac3f141af69bd515bd2ba031522df09b97dd72b100"))
	check("len(Transactions)", len(block.Transactions()), 1)
	check("Transactions[0].Hash", block.Transactions()[0].Hash(), tx1.Hash())

	ourBlockEnc, err := rlp.EncodeToBytes(&block)
	if err != nil {
		t.Fatal("encode error: ", err)
	}
	if !bytes.Equal(ourBlockEnc, blockEnc) {
		t.Errorf("encoded block mismatch:\ngot:  %x\nwant: %x", ourBlockEnc, blockEnc)
	}
}
