// Copyright 2014 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package types

import (
	"fmt"
	"math/big"

	"github.com/DxChainNetwork/godx/common/hexutil"
	"github.com/DxChainNetwork/godx/crypto"
)

type bytesBacked interface {
	Bytes() []byte
}

const (
	// BloomByteLength represents the number of bytes used in a header log bloom.
	BloomByteLength = 256

	// BloomBitLength represents the number of bits used in a header log bloom.
	BloomBitLength = 8 * BloomByteLength
)

// Bloom represents a 2048 bit bloom filter.
//
// When a block is generated or verified, the address of any logging contract, and
// all the indexed fields from the logs generated by executing those transactions
// are added to a bloom filter, which is included in the block header. The actual
// logs are not included in the block data, to save space.
//
// When an application wants to find all the log entries from a given contract, or
// with specific indexed fields (or both), the node can quickly scan over the header
// of each block, checking the bloom filter to see if it may contain relevant logs.
// If it does, the node re-executes the transactions from that block, regenerating
// the logs, and returning the relevant ones to the application.
//
// An empty Bloom filter is a bit array of m bits, all set to 0. There must also be
// k different hash functions defined, each of which maps or hashes some set element
// to one of the m array positions, generating a uniform random distribution. Typically,
// k is a constant, much smaller than m, which is proportional to the number of elements
// to be added; the precise choice of k and the constant of proportionality of m are
// determined by the intended false positive rate of the filter.
//
// To add an element, feed it to each of the k hash functions to get k array positions.
// Set the bits at all these positions to 1.
//
// To query for an element (test whether it is in the set), feed it to each of the k
// hash functions to get k array positions. If any of the bits at these positions is
// 0, the element is definitely not in the set – if it were, then all the bits would
// have been set to 1 when it was inserted. If all are 1, then either the element is
// in the set, or the bits have by chance been set to 1 during the insertion of other
// elements, resulting in a false positive. In a simple Bloom filter, there is no way
// to distinguish between the two cases, but more advanced techniques can address
// this problem.
//
// Pros:
//	space efficient
//
// Cons:
// 	can’t store an associated object
//	deletions are not allowed
//	small false positive probability
type Bloom [BloomByteLength]byte

// BytesToBloom converts a byte slice to a bloom filter.
// It panics if b is not of suitable size.
func BytesToBloom(b []byte) Bloom {
	var bloom Bloom
	bloom.SetBytes(b)
	return bloom
}

// SetBytes sets the content of b to the given bytes.
// It panics if d is not of suitable size.
func (b *Bloom) SetBytes(d []byte) {
	if len(b) < len(d) {
		panic(fmt.Sprintf("bloom bytes too big %d %d", len(b), len(d)))
	}
	copy(b[BloomByteLength-len(d):], d)
}

// Add adds d to the filter. Future calls of Test(d) will return true.
func (b *Bloom) Add(d *big.Int) {
	bin := new(big.Int).SetBytes(b[:])
	bin.Or(bin, bloom9(d.Bytes()))
	b.SetBytes(bin.Bytes())
}

// Big converts b to a big integer.
func (b Bloom) Big() *big.Int {
	return new(big.Int).SetBytes(b[:])
}

// Bytes convert Bloom to byte slice
func (b Bloom) Bytes() []byte {
	return b[:]
}

// Test directly call bloomLookup to see whether the test is in bloom
func (b Bloom) Test(test *big.Int) bool {
	return BloomLookup(b, test)
}

// TestByte check whether a byte string is in bloom.
// Deprecated: Do not use this function since it cannot deal with []byte start with 00
// Use BloomLookUp instead.
func (b Bloom) TestBytes(test []byte) bool {
	return b.Test(new(big.Int).SetBytes(test))

}

// MarshalText encodes b as a hex string with 0x prefix.
func (b Bloom) MarshalText() ([]byte, error) {
	return hexutil.Bytes(b[:]).MarshalText()
}

// UnmarshalText b as a hex string with 0x prefix.
func (b *Bloom) UnmarshalText(input []byte) error {
	return hexutil.UnmarshalFixedText("Bloom", input, b[:])
}

func CreateBloom(receipts Receipts) Bloom {
	bin := new(big.Int)
	for _, receipt := range receipts {
		bin.Or(bin, LogsBloom(receipt.Logs))
	}

	return BytesToBloom(bin.Bytes())
}

// LogBloom return a Bloom of log.Address and log.Topics
func LogsBloom(logs []*Log) *big.Int {
	bin := new(big.Int)
	for _, log := range logs {
		bin.Or(bin, bloom9(log.Address.Bytes()))
		for _, b := range log.Topics {
			bin.Or(bin, bloom9(b[:]))
		}
	}

	return bin
}

// bloom9 is a function mapping the hash of input bytes to big.Int for bloom use.
// Each hash of b set 1 in three positions from 2048 position.
func bloom9(b []byte) *big.Int {
	b = crypto.Keccak256(b)

	r := new(big.Int)

	// Total loop 3 times, setting at most 3 bits to 1. The bloom behaviour is the same for
	// two hashes with the same first 6 bytes with 2 each pair differs in order.
	// e.g bloom9({0x01, 0x02, 0x03, ...}) == bloom9({0x03, 0x02, 0x01, ...})
	for i := 0; i < 6; i += 2 {
		t := big.NewInt(1)
		// b is now (b[i]b[i+1]) and truncated to 10 bits. Presenting the bit position
		// where the 1 is set
		b := (uint(b[i+1]) + (uint(b[i]) << 8)) & 2047
		// Set the position for bit 1.
		r.Or(r, t.Lsh(t, b))
	}
	return r
}

var Bloom9 = bloom9

// Look up for the topic in bin
func BloomLookup(bin Bloom, topic bytesBacked) bool {
	bloom := bin.Big()
	// Convert the input topic to bytes. Apply the bloom 9 to the topic bytes.
	// Returning the Int to be compared.
	cmp := bloom9(topic.Bytes())
	// The key exist in bloom if AND result of bloom and cmp equals to cmp itself.
	return bloom.And(bloom, cmp).Cmp(cmp) == 0
}
