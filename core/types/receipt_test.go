package types

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/DxChainNetwork/godx/common"
	"github.com/DxChainNetwork/godx/common/hexutil"
	"github.com/DxChainNetwork/godx/crypto"
	"github.com/DxChainNetwork/godx/rlp"
	"strings"
	"testing"
)

var testReceiptsData = Receipts{
	NewReceipt([]byte{}, false, uint64(0)),
	NewReceipt(bytes.Repeat([]byte{0x01}, 32), true, uint64(1000)),
	testReceiptJsonData["ok"].r,
}

var testReceiptJsonData = map[string]struct {
	r    *Receipt
	size common.StorageSize

	rlpStr         []byte
	rlpEncodeError error
	rlpDecodeError error

	fullRlp            []byte
	fullRlpEncodeError error
	fullRlpDecodeError error

	jsonStr            string
	jsonUnmarshalError error
	jsonMarshalError   error
}{
	"ok": {
		rlpStr:  common.FromHex("f901a6a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470830f4240bf87cf87a94ecf8f87f810ecf450940c9f60066b4a7a501d6a7f842a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615a0000000000000000000000000000000000000000000000001a055690d9db80000"),
		jsonStr: `{"root":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","status":"0x1","cumulativeGasUsed":"0xf4240","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080040020000","logs":[{"address":"0xecf8f87f810ecf450940c9f60066b4a7a501d6a7","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x00000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615"],"data":"0x000000000000000000000000000000000000000000000001a055690d9db80000","blockNumber":"0x1ecfa4","transactionHash":"0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e","transactionIndex":"0x3","blockHash":"0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056","logIndex":"0x2","removed":false}],"transactionHash":"0x1111111111111111111111111111111111111111111111111111111111111111","contractAddress":"0x2222222222222222222222222222222222222222","gasUsed":"0x7a120"}`,
		fullRlp: common.FromHex("f90228a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470830f4240ba01111111111111111111111111111111111111111111111111111111111111111942222222222222222222222222222222222222222f8c4f8c294ecf8f87f810ecf450940c9f60066b4a7a501d6a7f842a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615a0000000000000000000000000000000000000000000000001a055690d9db80000831ecfa4a03b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e03a0656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056028307a120"),
		size:    common.StorageSize(680),
		r: &Receipt{
			PostState:         crypto.Keccak256(nil),
			Status:            ReceiptStatusSuccessful,
			CumulativeGasUsed: uint64(1000000),
			Bloom:             BytesToBloom(common.FromHex("80040020000")),
			Logs:              []*Log{logTestData["ok"].want},

			TxHash:          common.BytesToHash(bytes.Repeat([]byte{0x11}, 32)),
			ContractAddress: common.BytesToAddress(bytes.Repeat([]byte{0x22}, 20)),
			GasUsed:         uint64(500000),
		},
	},
	"corner": {
		rlpStr:  common.FromHex("f90207a0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88ffffffffffffffffb90100fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8d8f85a94ecf8f87f810ecf450940c9f60066b4a7a501d6a7f842a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c652561580f87a94ecf8f87f810ecf450940c9f60066b4a7a501d6a7f842a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615a0000000000000000000000000000000000000000000000001a055690d9db80000"),
		jsonStr: `{"root":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff","status":"0x0","cumulativeGasUsed":"0xffffffffffffffff","logsBloom":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff","logs":[{"address":"0xecf8f87f810ecf450940c9f60066b4a7a501d6a7","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x00000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615"],"data":"0x","blockNumber":"0x1ecfa4","transactionHash":"0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e","transactionIndex":"0x3","blockHash":"0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056","logIndex":"0x2","removed":false},{"address":"0xecf8f87f810ecf450940c9f60066b4a7a501d6a7","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x00000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615"],"data":"0x000000000000000000000000000000000000000000000001a055690d9db80000","blockNumber":"0x1ecfa4","transactionHash":"0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e","transactionIndex":"0x3","blockHash":"0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056","logIndex":"0x2","removed":false}],"transactionHash":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff","contractAddress":"0xffffffffffffffffffffffffffffffffffffffff","gasUsed":"0xffffffffffffffff"}`,
		fullRlp: common.FromHex("f902d7a0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88ffffffffffffffffb90100ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94fffffffffffffffffffffffffffffffffffffffff90168f8a294ecf8f87f810ecf450940c9f60066b4a7a501d6a7f842a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c652561580831ecfa4a03b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e03a0656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad68105602f8c294ecf8f87f810ecf450940c9f60066b4a7a501d6a7f842a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615a0000000000000000000000000000000000000000000000001a055690d9db80000831ecfa4a03b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e03a0656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad6810560288ffffffffffffffff"),
		size:    common.StorageSize(912),
		r: &Receipt{
			PostState:         bytes.Repeat([]byte{0xff}, common.HashLength),
			Status:            ReceiptStatusFailed,
			CumulativeGasUsed: uint64(18446744073709551615),
			Bloom:             BytesToBloom(bytes.Repeat([]byte{0xff}, BloomByteLength)),
			Logs: []*Log{
				{
					Address:     common.HexToAddress("0xecf8f87f810ecf450940c9f60066b4a7a501d6a7"),
					BlockHash:   common.HexToHash("0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056"),
					BlockNumber: 2019236,
					Data:        []byte{},
					Index:       2,
					TxIndex:     3,
					TxHash:      common.HexToHash("0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e"),
					Topics: []common.Hash{
						common.HexToHash("0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"),
						common.HexToHash("0x00000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615"),
					},
				},
				{
					Address:     common.HexToAddress("0xecf8f87f810ecf450940c9f60066b4a7a501d6a7"),
					BlockHash:   common.HexToHash("0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056"),
					BlockNumber: 2019236,
					Data:        hexutil.MustDecode("0x000000000000000000000000000000000000000000000001a055690d9db80000"),
					Index:       2,
					TxIndex:     3,
					TxHash:      common.HexToHash("0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e"),
					Topics: []common.Hash{
						common.HexToHash("0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"),
						common.HexToHash("0x00000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615"),
					},
				},
			},
			TxHash:          common.BytesToHash(bytes.Repeat([]byte{0xff}, 32)),
			ContractAddress: common.BytesToAddress(bytes.Repeat([]byte{0xff}, 20)),
			GasUsed:         uint64(18446744073709551615),
		},
	},
	"empty": {
		rlpStr:  common.FromHex("f901068080b9010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0"),
		jsonStr: `{"root":"0x","status":"0x0","cumulativeGasUsed":"0x0","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","logs":[],"transactionHash":"0x0001020300010203000102030001020300010203000102030001020300010203","contractAddress":"0x0001020300010203000102030001020300010203","gasUsed":"0x0"}`,
		fullRlp: common.FromHex("f9013d8080ba00001020300010203000102030001020300010203000102030001020300010203940001020300010203000102030001020300010203c080"),
		size:    common.StorageSize(384),
		r: &Receipt{
			PostState:         []byte{},
			Status:            ReceiptStatusFailed,
			CumulativeGasUsed: uint64(0),
			Bloom:             BytesToBloom([]byte{0}),
			Logs:              []*Log{},
			TxHash:            common.BytesToHash(bytes.Repeat([]byte{0, 1, 2, 3}, 8)),
			ContractAddress:   common.BytesToAddress(bytes.Repeat([]byte{0, 1, 2, 3}, 5)),
			GasUsed:           uint64(0),
		},
	},
	"Missing json PostState": {
		rlpStr:  common.FromHex("f9018601830f4240bf87cf87a94ecf8f87f810ecf450940c9f60066b4a7a501d6a7f842a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615a0000000000000000000000000000000000000000000000001a055690d9db80000"),
		jsonStr: `{"status":"0x1","cumulativeGasUsed":"0xf4240","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080040020000","logs":[{"address":"0xecf8f87f810ecf450940c9f60066b4a7a501d6a7","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x00000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615"],"data":"0x000000000000000000000000000000000000000000000001a055690d9db80000","blockNumber":"0x1ecfa4","transactionHash":"0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e","transactionIndex":"0x3","blockHash":"0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056","logIndex":"0x2","removed":false}],"transactionHash":"0x1111111111111111111111111111111111111111111111111111111111111111","contractAddress":"0x2222222222222222222222222222222222222222","gasUsed":"0x7a120"}`,
		fullRlp: common.FromHex("f9020801830f4240ba01111111111111111111111111111111111111111111111111111111111111111942222222222222222222222222222222222222222f8c4f8c294ecf8f87f810ecf450940c9f60066b4a7a501d6a7f842a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615a0000000000000000000000000000000000000000000000001a055690d9db80000831ecfa4a03b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e03a0656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056028307a120"),
		size:    common.StorageSize(648),
		r: &Receipt{
			Status:            ReceiptStatusSuccessful,
			CumulativeGasUsed: uint64(1000000),
			Bloom:             BytesToBloom(common.FromHex("80040020000")),
			Logs:              []*Log{logTestData["ok"].want},

			TxHash:          common.BytesToHash(bytes.Repeat([]byte{0x11}, 32)),
			ContractAddress: common.BytesToAddress(bytes.Repeat([]byte{0x22}, 20)),
			GasUsed:         uint64(500000),
		},
	},
	"rlp_decode_error": {
		rlpStr:         common.FromHex("f901a6a0c5d246086f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470830f4240bf87cf87a94ecf8f87f810ecf450940c9f60066b4a7a501d6a7f842a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615a0000000000000000000000000000000000000000000000001a055690d9db80000"),
		rlpDecodeError: errors.New("rlp: expected input list for types.receiptRLP"),

		fullRlp:            common.FromHex("f90228a0c5d24186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470830f4240b9010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080040020000a01111111111111111111111111111111111111111111111111111111111111111942222222222222222222222222222222222222222f8c4f8c294ecf8f87f810ecf450940c9f60066b4a7a501d6a7f842a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615a0000000000000000000000000000000000000000000000001a055690d9db80000831ecfa4a03b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e03a0656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056028307a120"),
		fullRlpDecodeError: errors.New("rlp: value size exceeds available input length"),
	},
	"rlp_decode_set_status_error": {
		rlpStr:         common.FromHex("f9018983010203830f4240bf87cf87a94ecf8f87f810ecf450940c9f60066b4a7a501d6a7f842a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615a0000000000000000000000000000000000000000000000001a055690d9db80000"),
		rlpDecodeError: errors.New("invalid receipt status 010203"),

		fullRlp:            common.FromHex("f9020b83010203830f4240ba01111111111111111111111111111111111111111111111111111111111111111942222222222222222222222222222222222222222f8c4f8c294ecf8f87f810ecf450940c9f60066b4a7a501d6a7f842a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615a0000000000000000000000000000000000000000000000001a055690d9db80000831ecfa4a03b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e03a0656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056028307a120"),
		fullRlpDecodeError: errors.New("invalid receipt status 010203"),
	},
	"json_unmarshal_error": {
		jsonStr:            `{"root":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca822b7bfad8045d85a470","status":"0xz","cumulativeGasUsed":"0xf4240","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080040020000","logs":[{"address":"0xecf8f87f810ecf450940c9f60066b4a7a501d6a7","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x00000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615"],"data":"0x000000000000000000000000000000000000000000000001a055690d9db80000","blockNumber":"0x1ecfa4","transactionHash":"0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e","transactionIndex":"0x3","blockHash":"0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056","logIndex":"0x2","removed":false}],"transactionHash":"0x1111111111111111111111111111111111111111111111111111111111111111","contractAddress":"0x2222222222222222222222222222222222222222","gasUsed":"0x7a120"}`,
		jsonUnmarshalError: errors.New("json: cannot unmarshal invalid hex string into Go value of type hexutil.Uint64"),
	},
	"json_unmarshal_missing_LogsBloom": {
		jsonStr:            `{"root":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","status":"0x1","cumulativeGasUsed":"0xf4240","logs":[{"address":"0xecf8f87f810ecf450940c9f60066b4a7a501d6a7","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x00000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615"],"data":"0x000000000000000000000000000000000000000000000001a055690d9db80000","blockNumber":"0x1ecfa4","transactionHash":"0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e","transactionIndex":"0x3","blockHash":"0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056","logIndex":"0x2","removed":false}],"transactionHash":"0x1111111111111111111111111111111111111111111111111111111111111111","contractAddress":"0x2222222222222222222222222222222222222222","gasUsed":"0x7a120"}`,
		jsonUnmarshalError: errors.New("missing required field 'logsBloom' for Receipt"),
	},
	"json_unmarshal_missing_CumulativeGasUsed": {
		jsonStr:            `{"root":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","status":"0x1","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080040020000","logs":[{"address":"0xecf8f87f810ecf450940c9f60066b4a7a501d6a7","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x00000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615"],"data":"0x000000000000000000000000000000000000000000000001a055690d9db80000","blockNumber":"0x1ecfa4","transactionHash":"0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e","transactionIndex":"0x3","blockHash":"0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056","logIndex":"0x2","removed":false}],"transactionHash":"0x1111111111111111111111111111111111111111111111111111111111111111","contractAddress":"0x2222222222222222222222222222222222222222","gasUsed":"0x7a120"}`,
		jsonUnmarshalError: errors.New("missing required field 'cumulativeGasUsed' for Receipt"),
	},
	"json_unmarshal_missing_Logs": {
		jsonStr:            `{"root":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","status":"0x1","cumulativeGasUsed":"0xf4240","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080040020000","transactionHash":"0x1111111111111111111111111111111111111111111111111111111111111111","contractAddress":"0x2222222222222222222222222222222222222222","gasUsed":"0x7a120"}`,
		jsonUnmarshalError: errors.New("missing required field 'logs' for Receipt"),
	},
	"json_unmarshal_missing_TxHash": {
		jsonStr:            `{"root":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","status":"0x1","cumulativeGasUsed":"0xf4240","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080040020000","logs":[{"address":"0xecf8f87f810ecf450940c9f60066b4a7a501d6a7","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x00000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615"],"data":"0x000000000000000000000000000000000000000000000001a055690d9db80000","blockNumber":"0x1ecfa4","transactionHash":"0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e","transactionIndex":"0x3","blockHash":"0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056","logIndex":"0x2","removed":false}],"contractAddress":"0x2222222222222222222222222222222222222222","gasUsed":"0x7a120"}`,
		jsonUnmarshalError: errors.New("missing required field 'transactionHash' for Receipt"),
	},
	"json_unmarshal_missing_GasUsed": {
		jsonStr:            `{"root":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","status":"0x1","cumulativeGasUsed":"0xf4240","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080040020000","logs":[{"address":"0xecf8f87f810ecf450940c9f60066b4a7a501d6a7","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x00000000000000000000000080b2c9d7cbbf30a1b0fc8983c647d754c6525615"],"data":"0x000000000000000000000000000000000000000000000001a055690d9db80000","blockNumber":"0x1ecfa4","transactionHash":"0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e","transactionIndex":"0x3","blockHash":"0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056","logIndex":"0x2","removed":false}],"transactionHash":"0x1111111111111111111111111111111111111111111111111111111111111111","contractAddress":"0x2222222222222222222222222222222222222222"}`,
		jsonUnmarshalError: errors.New("missing required field 'gasUsed' for Receipt"),
	},
}

// TestNewReceipt test NewReceipt
func TestNewReceipt(t *testing.T) {
	//r := *testReceiptJsonData["ok"].r
	//r.PostState = []byte{1,2,3}
	//rfs := ReceiptForStorage(r)
	//res, _ := rlp.EncodeToBytes(&rfs)
	//fmt.Printf("%x\n", res)
	tests := []struct {
		root              []byte
		failed            bool
		cumulativeGasUsed uint64
	}{
		{[]byte{}, false, 0},
		{[]byte{0x11, 0x12, 0x13}, true, 10000},
		{[]byte{0x23, 0x91, 0xff}, false, 18446744073709551615},
	}
	statusMap := make(map[bool]uint64)
	statusMap[true] = ReceiptStatusFailed
	statusMap[false] = ReceiptStatusSuccessful
	for i, test := range tests {
		res := NewReceipt(test.root, test.failed, test.cumulativeGasUsed)
		CheckEquality(t, string(i), "PostState", res.PostState, test.root)
		CheckEquality(t, string(i), "Status", res.Status, statusMap[test.failed])
		CheckEquality(t, string(i), "CumulativeGasUsed", res.CumulativeGasUsed, test.cumulativeGasUsed)
	}
}

func TestReceipt_StatusEncoding(t *testing.T) {
	tests := []struct {
		input Receipt
		want  []byte
	}{
		{
			input: Receipt{PostState: []byte{0x01, 0x02, 0x03}, Status: ReceiptStatusSuccessful},
			want:  []byte{0x01, 0x02, 0x03},
		},
		{
			input: Receipt{PostState: []byte{0x01, 0x02, 0x03}, Status: ReceiptStatusFailed},
			want:  []byte{0x01, 0x02, 0x03},
		},
		{
			input: Receipt{PostState: []byte{}, Status: ReceiptStatusSuccessful},
			want:  receiptStatusSuccessfulRLP,
		},
		{
			input: Receipt{PostState: []byte{}, Status: ReceiptStatusFailed},
			want:  receiptStatusFailedRLP,
		},
	}
	for i, test := range tests {
		CheckEquality(t, string(i), "status", test.input.statusEncoding(), test.want)
	}
}

func TestReceipt_SetStatus(t *testing.T) {
	tests := []struct {
		input []byte
		field string
		want  interface{}
	}{
		{bytes.Repeat([]byte{0x01}, len(common.Hash{})), "PostState", bytes.Repeat([]byte{0x01},
			len(common.Hash{}))},
		{receiptStatusSuccessfulRLP, "Status", ReceiptStatusSuccessful},
		{receiptStatusFailedRLP, "Status", ReceiptStatusFailed},
	}
	for i, test := range tests {
		r := NewReceipt([]byte{}, false, 0)
		err := r.setStatus(test.input)
		CheckError(t, string(i), err, nil)
		if test.field == "PostState" {
			CheckEquality(t, string(i), "PostState", r.PostState, test.want)
		} else if test.field == "Status" {
			CheckEquality(t, string(i), "Status", r.Status, test.want)
		}
	}
}

func TestReceipt_SetStatusPanic(t *testing.T) {
	input := []byte{0x02, 0x02}
	r := NewReceipt([]byte{}, false, 0)
	err := r.setStatus(input)
	if err == nil {
		t.Errorf("Receipt.Set an input length not equal to 32 does not result an error")
	}
}

// TestReceipt_EncodeRLP test the encode function for Receipt.
// This test function will not call EncodeRLP directly, but rather call rlp.EncodeToByte
// cause Receipt implements rlp.Encoder.
func TestReceipt_EncodeRLP(t *testing.T) {
	for name, test := range testReceiptJsonData {
		if test.r == nil || (bytes.Equal(test.rlpStr, []byte{}) && test.rlpEncodeError == nil) {
			continue
		}
		res, err := rlp.EncodeToBytes(test.r)
		CheckError(t, name, err, test.rlpEncodeError)
		if err != nil {
			continue
		}
		CheckEquality(t, name, "rlpStr", res, test.rlpStr)
	}
}

// TestReceipt_DecodeRLP test the decode function for Receipt.
// This test function will not call DecodeRLP directly, but rather call rlp.DecodeToByte
// cause Receipt implements rlp.Decoder.
func TestReceipt_DecodeRLP(t *testing.T) {
	for name, test := range testReceiptJsonData {
		if test.rlpDecodeError == nil && test.r == nil {
			continue
		}
		var r *Receipt
		err := rlp.DecodeBytes(test.rlpStr, &r)
		CheckError(t, name, err, test.rlpDecodeError)
		if err != nil {
			continue
		}
		//At least one of the PostState and Status has to be the same.
		if !bytes.Equal(test.r.PostState, r.PostState) && r.Status != test.r.Status {
			t.Errorf("Receipt DecodeRLP does not have expected PostState or Status. Got %d/%s Want %d/%s",
				r.Status, dumper.Sdump(r.PostState), test.r.Status, dumper.Sdump(test.r.PostState))
		}
		// Check CumulativeGasUsed
		CheckEquality(t, name, "CumulativeGasUsed", r.CumulativeGasUsed, test.r.CumulativeGasUsed)
		// Check Bloom
		CheckEquality(t, name, "Bloom", r.Bloom, test.r.Bloom)
		// Check Logs
		CheckEquality(t, name, "Logs", r.Logs, test.r.Logs)
	}
}

func TestReceipt_Size(t *testing.T) {
	for name, test := range testReceiptJsonData {
		if test.r == nil {
			continue
		}
		size := test.r.Size()
		CheckEquality(t, name, "size", size, test.size)
	}
}

// TestReceiptForStorage_EncodeRLP test ReceiptForStorage.EncodeRLP
// This function will encode every field from receipt. The log will also encoded fully
// except the field Removed
func TestReceiptForStorage_EncodeRLP(t *testing.T) {
	for name, test := range testReceiptJsonData {
		if test.r == nil || (bytes.Equal(test.fullRlp, []byte{}) && test.fullRlpEncodeError == nil) {
			continue
		}
		r := (*ReceiptForStorage)(test.r)
		res, err := rlp.EncodeToBytes(r)
		CheckError(t, name, err, test.fullRlpEncodeError)
		if err != nil {
			continue
		}
		CheckEquality(t, name, "fullRlp", res, test.fullRlp)
	}
}

// TestReceiptForStorage_DecodeRLP test ReceiptForStorage.DecodeRLP
func TestReceiptForStorage_DecodeRLP(t *testing.T) {
	for name, test := range testReceiptJsonData {
		if bytes.Equal(test.fullRlp, []byte{}) && test.fullRlpDecodeError == nil {
			continue
		}

		var rfs ReceiptForStorage
		err := rlp.DecodeBytes(test.fullRlp, &rfs)
		CheckError(t, name, err, test.fullRlpDecodeError)
		if err != nil {
			continue
		}
		CheckEquality(t, name, "ReceiptForStorage", rfs, ReceiptForStorage(*test.r))
	}
}

// TestReceipt_MarshalJSON test Receipt.MarshalJSON
func TestReceipt_MarshalJSON(t *testing.T) {
	for name, test := range testReceiptJsonData {
		if test.r == nil || strings.HasPrefix(name, "Miss") {
			continue
		}
		res, err := json.Marshal(*test.r)
		CheckError(t, name, err, test.jsonMarshalError)
		CheckEquality(t, name, "jsonStr", string(res), test.jsonStr)
	}
}

// TestReceipt_MarshalJSON test Receipt.UnmarshalJSON
func TestReceipt_UnmarshalJSON(t *testing.T) {
	for name, test := range testReceiptJsonData {
		if test.r == nil && test.jsonUnmarshalError == nil {
			continue
		}
		var res Receipt
		err := json.Unmarshal([]byte(test.jsonStr), &res)
		CheckError(t, name, err, test.jsonUnmarshalError)
		if err != nil {
			continue
		}
		CheckEquality(t, name, "Unmarshal", res, *test.r)
	}
}

func TestReceipts_LenGetRlp(t *testing.T) {
	rs := Receipts{}
	length := 0
	for _, r := range testReceiptsData {
		if rs.Len() != length {
			t.Errorf("Receipts length unexpected. Got %d Wang %d", rs.Len(), length)
		}
		rs = append(rs, r)
		length++
	}
	if rs.Len() != len(testReceiptsData) {
		t.Errorf("After appending, Receipts length unexpected. Got %d Wang %d", rs.Len(), len(testReceiptsData))
	}
	for i, r := range testReceiptsData {
		resRlp := rs.GetRlp(i)
		tarRlp, _ := rlp.EncodeToBytes(&r)
		CheckEquality(t, "rlp", fmt.Sprintf("[%d]", i), resRlp, tarRlp)
	}
}
